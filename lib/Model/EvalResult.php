<?php
/**
 * EvalResult
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Flagr\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Flagr
 *
 * Flagr is a feature flagging, A/B testing and dynamic configuration microservice. The base path for all the APIs is \"/api/v1\".
 *
 * The version of the OpenAPI document: 1.1.14
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.1.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Flagr\Client\Model;

use ArrayAccess;
use Flagr\Client\ObjectSerializer;

/**
 * EvalResult Class Doc Comment
 *
 * @category Class
 * @package  Flagr\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class EvalResult implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     */
    protected static string $openAPIModelName = 'evalResult';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static array $openAPITypes = [
        'flag_id' => 'int',
        'flag_key' => 'string',
        'flag_snapshot_id' => 'int',
        'segment_id' => 'int',
        'variant_id' => 'int',
        'variant_key' => 'string',
        'variant_attachment' => 'object',
        'eval_context' => \Flagr\Client\Model\EvalContext::class,
        'timestamp' => 'string',
        'eval_debug_log' => \Flagr\Client\Model\EvalDebugLog::class
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'flag_id' => 'int64',
        'flag_key' => null,
        'flag_snapshot_id' => 'int64',
        'segment_id' => 'int64',
        'variant_id' => 'int64',
        'variant_key' => null,
        'variant_attachment' => null,
        'eval_context' => null,
        'timestamp' => null,
        'eval_debug_log' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static array $attributeMap = [
        'flag_id' => 'flagID',
        'flag_key' => 'flagKey',
        'flag_snapshot_id' => 'flagSnapshotID',
        'segment_id' => 'segmentID',
        'variant_id' => 'variantID',
        'variant_key' => 'variantKey',
        'variant_attachment' => 'variantAttachment',
        'eval_context' => 'evalContext',
        'timestamp' => 'timestamp',
        'eval_debug_log' => 'evalDebugLog'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static array $setters = [
        'flag_id' => 'setFlagId',
        'flag_key' => 'setFlagKey',
        'flag_snapshot_id' => 'setFlagSnapshotId',
        'segment_id' => 'setSegmentId',
        'variant_id' => 'setVariantId',
        'variant_key' => 'setVariantKey',
        'variant_attachment' => 'setVariantAttachment',
        'eval_context' => 'setEvalContext',
        'timestamp' => 'setTimestamp',
        'eval_debug_log' => 'setEvalDebugLog'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static array $getters = [
        'flag_id' => 'getFlagId',
        'flag_key' => 'getFlagKey',
        'flag_snapshot_id' => 'getFlagSnapshotId',
        'segment_id' => 'getSegmentId',
        'variant_id' => 'getVariantId',
        'variant_key' => 'getVariantKey',
        'variant_attachment' => 'getVariantAttachment',
        'eval_context' => 'getEvalContext',
        'timestamp' => 'getTimestamp',
        'eval_debug_log' => 'getEvalDebugLog'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['flag_id'] = $data['flag_id'] ?? null;
        $this->container['flag_key'] = $data['flag_key'] ?? null;
        $this->container['flag_snapshot_id'] = $data['flag_snapshot_id'] ?? null;
        $this->container['segment_id'] = $data['segment_id'] ?? null;
        $this->container['variant_id'] = $data['variant_id'] ?? null;
        $this->container['variant_key'] = $data['variant_key'] ?? null;
        $this->container['variant_attachment'] = $data['variant_attachment'] ?? null;
        $this->container['eval_context'] = $data['eval_context'] ?? null;
        $this->container['timestamp'] = $data['timestamp'] ?? null;
        $this->container['eval_debug_log'] = $data['eval_debug_log'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets flag_id
     *
     * @return int|null
     */
    public function getFlagId()
    {
        return $this->container['flag_id'];
    }

    /**
     * Sets flag_id
     *
     * @param int|null $flag_id flag_id
     *
     * @return self
     */
    public function setFlagId($flag_id)
    {
        $this->container['flag_id'] = $flag_id;

        return $this;
    }

    /**
     * Gets flag_key
     *
     * @return string|null
     */
    public function getFlagKey()
    {
        return $this->container['flag_key'];
    }

    /**
     * Sets flag_key
     *
     * @param string|null $flag_key flag_key
     *
     * @return self
     */
    public function setFlagKey($flag_key)
    {
        $this->container['flag_key'] = $flag_key;

        return $this;
    }

    /**
     * Gets flag_snapshot_id
     *
     * @return int|null
     */
    public function getFlagSnapshotId()
    {
        return $this->container['flag_snapshot_id'];
    }

    /**
     * Sets flag_snapshot_id
     *
     * @param int|null $flag_snapshot_id flag_snapshot_id
     *
     * @return self
     */
    public function setFlagSnapshotId($flag_snapshot_id)
    {
        $this->container['flag_snapshot_id'] = $flag_snapshot_id;

        return $this;
    }

    /**
     * Gets segment_id
     *
     * @return int|null
     */
    public function getSegmentId()
    {
        return $this->container['segment_id'];
    }

    /**
     * Sets segment_id
     *
     * @param int|null $segment_id segment_id
     *
     * @return self
     */
    public function setSegmentId($segment_id)
    {
        $this->container['segment_id'] = $segment_id;

        return $this;
    }

    /**
     * Gets variant_id
     *
     * @return int|null
     */
    public function getVariantId()
    {
        return $this->container['variant_id'];
    }

    /**
     * Sets variant_id
     *
     * @param int|null $variant_id variant_id
     *
     * @return self
     */
    public function setVariantId($variant_id)
    {
        $this->container['variant_id'] = $variant_id;

        return $this;
    }

    /**
     * Gets variant_key
     *
     * @return string|null
     */
    public function getVariantKey()
    {
        return $this->container['variant_key'];
    }

    /**
     * Sets variant_key
     *
     * @param string|null $variant_key variant_key
     *
     * @return self
     */
    public function setVariantKey($variant_key)
    {
        $this->container['variant_key'] = $variant_key;

        return $this;
    }

    /**
     * Gets variant_attachment
     *
     * @return object|null
     */
    public function getVariantAttachment()
    {
        return $this->container['variant_attachment'];
    }

    /**
     * Sets variant_attachment
     *
     * @param object|null $variant_attachment variant_attachment
     *
     * @return self
     */
    public function setVariantAttachment($variant_attachment)
    {
        $this->container['variant_attachment'] = $variant_attachment;

        return $this;
    }

    /**
     * Gets eval_context
     *
     * @return \Flagr\Client\Model\EvalContext|null
     */
    public function getEvalContext()
    {
        return $this->container['eval_context'];
    }

    /**
     * Sets eval_context
     *
     * @param \Flagr\Client\Model\EvalContext|null $eval_context eval_context
     *
     * @return self
     */
    public function setEvalContext($eval_context)
    {
        $this->container['eval_context'] = $eval_context;

        return $this;
    }

    /**
     * Gets timestamp
     *
     * @return string|null
     */
    public function getTimestamp()
    {
        return $this->container['timestamp'];
    }

    /**
     * Sets timestamp
     *
     * @param string|null $timestamp timestamp
     *
     * @return self
     */
    public function setTimestamp($timestamp)
    {
        $this->container['timestamp'] = $timestamp;

        return $this;
    }

    /**
     * Gets eval_debug_log
     *
     * @return \Flagr\Client\Model\EvalDebugLog|null
     */
    public function getEvalDebugLog()
    {
        return $this->container['eval_debug_log'];
    }

    /**
     * Sets eval_debug_log
     *
     * @param \Flagr\Client\Model\EvalDebugLog|null $eval_debug_log eval_debug_log
     *
     * @return self
     */
    public function setEvalDebugLog($eval_debug_log)
    {
        $this->container['eval_debug_log'] = $eval_debug_log;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
